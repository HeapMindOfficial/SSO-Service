generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model allowedOrigin {
  id        String   @id @default(uuid())
  origin    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id              String              @id @default(uuid())
  email           String              @unique
  password        String
  firstName       String
  middleName      String?
  lastName        String
  organisationId  String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deleted         Boolean             @default(false)
  disabled        Boolean             @default(false)
  verified        Boolean             @default(false)
  accessTokens    AccessToken[]
  authCodes       AuthorizationCode[]
  RefreshToken    RefreshToken[]
  organisation    Organisation?       @relation(fields: [organisationId], references: [id])
  UserPermissions UserPermissions[]
  sessions        sessions[]
  groups          Group[]             @relation("GroupToUser")
}

model Resource {
  id          String        @id @default(uuid())
  name        String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Permissions Permissions[]
}

model Organisation {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model Permissions {
  id               String             @id @default(uuid())
  name             String
  resourceId       String
  action           String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  GroupPermissions GroupPermissions[]
  resource         Resource           @relation(fields: [resourceId], references: [id])
  UserPermissions  UserPermissions[]
}

model UserPermissions {
  id           String      @id @default(uuid())
  userId       String
  permissionId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  permission   Permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
}

model Group {
  id               String             @id @default(uuid())
  name             String
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  GroupPermissions GroupPermissions[]
  User             User[]             @relation("GroupToUser")
}

model GroupPermissions {
  id           String      @id @default(uuid())
  groupId      String
  permissionId String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  group        Group       @relation(fields: [groupId], references: [id], onDelete: Cascade)
  permission   Permissions @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([groupId, permissionId])
}

model sessions {
  id           String              @id @default(uuid())
  userId       String
  token        String
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  expiresAt    DateTime
  AccessToken  AccessToken[]
  authCodes    AuthorizationCode[]
  RefreshToken RefreshToken[]
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OAuth2Client {
  id            String              @id @default(uuid())
  clientId      String              @unique
  clientSecret  String
  name          String
  redirectUris  String[]
  grantTypes    String[]            @default(["authorization_code", "refresh_token"])
  scopes        String[]            @default(["openid", "profile", "email"])
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  accessTokens  AccessToken[]
  authCodes     AuthorizationCode[]
  refreshTokens RefreshToken[]
}

model AuthorizationCode {
  id          String       @id @default(uuid())
  code        String       @unique
  clientId    String
  userId      String
  sessionId   String
  scopes      String[]
  redirectUri String
  expiresAt   DateTime
  createdAt   DateTime     @default(now())
  client      OAuth2Client @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  session     sessions     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AccessToken {
  id        String       @id @default(uuid())
  token     String       @unique
  clientId  String
  userId    String?
  scopes    String[]
  sessionId String
  expiresAt DateTime
  createdAt DateTime     @default(now())
  client    OAuth2Client @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  session   sessions     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id        String       @id @default(uuid())
  token     String       @unique
  clientId  String
  sessionId String
  userId    String?
  expiresAt DateTime
  createdAt DateTime     @default(now())
  client    OAuth2Client @relation(fields: [clientId], references: [clientId], onDelete: Cascade)
  session   sessions     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
}
